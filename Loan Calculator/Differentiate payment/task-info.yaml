type: edu
custom_name: stage4
files:
- name: creditcalc/creditcalc.py
  visible: true
  text: |
    loan_principal = 'Loan principal: 1000'
    final_output = 'The loan has been repaid!'
    first_month = 'Month 1: repaid 250'
    second_month = 'Month 2: repaid 250'
    third_month = 'Month 3: repaid 500'

    # write your code here
  learner_created: false
- name: tests.py
  visible: false
  text: |
    from hstest.stage_test import StageTest
    from hstest.test_case import TestCase
    from hstest.check_result import CheckResult
    import re

    CheckResult.correct = lambda: CheckResult(True, '')
    CheckResult.wrong = lambda feedback: CheckResult(False, feedback)


    class LoanCalcTest(StageTest):
        def generate(self):
            return [
                TestCase(
                    args=[
                        '--type=annuity',
                        '--payment=8722',
                        '--periods=120',
                        '--interest=5.6',
                    ],
                    attach=('principal', 800018, 246622),
                ),
                TestCase(
                    args=[
                        '--type=annuity',
                        '--payment=6898',
                        '--periods=240',
                        '--interest=3.4',
                    ],
                    attach=('principal', 1199997, 455523),
                ),

                TestCase(
                    args=[
                        '--type=annuity',
                        '--principal=1000000',
                        '--periods=8',
                        '--interest=9.8',
                    ],
                    attach=('payment', 129638, 37104),
                ),

                TestCase(
                    args=[
                        '--type=annuity',
                        '--principal=1000000',
                        '--periods=60',
                        '--interest=10',
                    ],
                    attach=('payment', 274880, 21248),
                ),

                TestCase(
                    args=[
                        '--type=annuity',
                        '--principal=500000',
                        '--payment=23000',
                        '--interest=7.8',
                    ],
                    attach=('periods', 52000, 24),
                ),

                TestCase(
                    args=[
                        '--type=diff',
                        '--principal=1000000',
                        '--periods=10',
                        '--interest=10',
                    ],
                    attach=[
                        108334,
                        107500,
                        106667,
                        105834,
                        105000,
                        104167,
                        103334,
                        102500,
                        101667,
                        100834,
                        45837,
                    ],
                ),

                TestCase(
                    args=[
                        '--type=diff',
                        '--principal=500000',
                        '--periods=8',
                        '--interest=7.8',
                    ],
                    attach=[
                        65750,
                        65344,
                        64938,
                        64532,
                        64125,
                        63719,
                        63313,
                        62907,
                        14628,
                    ],
                ),

                TestCase(
                    args=[
                        '--type=annuity',
                        '--principal=1000000',
                        '--payment=104000',
                    ],
                    attach='Incorrect',
                ),

                TestCase(
                    args=[
                        '--type=diff',
                        '--principal=-1000000',
                        '--payment=104000',
                        '--periods=8',
                    ],
                    attach='Incorrect',
                ),

            ]

        def check(self, reply, attach):
            if attach == 'Incorrect':
                if attach.lower() in reply.lower():
                    return CheckResult.correct()

                return CheckResult.wrong(
                    'Parameters are incorrect. '
                    'Just output "Incorrect parameters"'
                )

            numbers = re.findall(r'[-+]?(\d*\.\d+|\d+)', reply)
            if len(numbers) == 0:
                return CheckResult.wrong(
                    'No numbers in the answer',
                )

            if isinstance(attach, tuple):
                if attach[0] == 'periods':
                    years = int(attach[2] / 12)
                    months = str(int(attach[2] % 12))
                    for i in numbers:
                        if abs(attach[1] - float(i)) < 2:
                            if str(months) in numbers or str(years) in numbers:
                                return CheckResult.correct()

                    if years == 0:
                        output = (
                            'Looks like your periods '
                            'calculations aren\'t working properly. '
                            'Correct months and overpayment are '
                            '[ {0}, {1} ]'
                            ', but you output: {2}'
                        )
                        return CheckResult.wrong(
                            output.format(attach[2], attach[1], numbers),
                        )
                    else:
                        if months != '0':
                            output = (
                                'Looks like your periods '
                                'calculations aren\'t working properly. '
                                'Correct years, months and overpayment are '
                                '[ {0}, {1}, {2} ]'
                                ', but you output: {3}'
                            )
                            return CheckResult.wrong(
                                output.format(years, months, attach[1], numbers),
                            )
                        else:
                            output = (
                                'Looks like your periods '
                                'calculations aren\'t working properly. '
                                'Correct years and overpayment are '
                                '[ {0}, {1} ]'
                                ', but you output: {2}'
                            )
                            return CheckResult.wrong(
                                output.format(years, attach[1], numbers),
                            )
                for i in numbers:
                    if not abs(attach[1] - float(i)) < 2:
                        if not abs(attach[2] - float(i)) < 2:
                            if attach[0] == 'payment':
                                output = (
                                    'Looks like your annuity payments '
                                    'calculations aren\'t working properly. '
                                    'Correct annuity payment and overpayment are '
                                    '[ {0}, {1} ]'
                                    ', but you output: {2}'
                                )
                            else:
                                output = (
                                    'Looks like your loan principal '
                                    'calculations aren\'t working properly. '
                                    'Correct loan principal and overpayment are '
                                    '[ {0}, {1} ]'
                                    ', but you output: {2}'
                                )
                            return CheckResult.wrong(
                                output.format(attach[2], attach[1], numbers),
                            )

                return CheckResult.correct()

            if isinstance(attach, list):
                if (len(numbers) + 1) / 2 < len(attach):
                    user_numbers = numbers[1::2]
                    if numbers[-1] not in user_numbers:
                        user_numbers.append(numbers[-1])
                    return CheckResult.wrong(
                        'Not enough values for diff payment in the answer '
                        'must be {0} with overpayment {1}, but you output: {2}'
                        .format(attach[:-1], attach[-1], user_numbers)
                    )

                for figure in attach:
                    flag = False
                    for number in numbers:
                        if abs(float(number) - figure) < 2:
                            flag = True
                            break
                    if flag is False:
                        user_numbers = numbers[1::2]
                        if numbers[-1] not in user_numbers:
                            user_numbers.append(numbers[-1])
                        return CheckResult.wrong(
                            'Incorrect result '
                            'must be {0} with overpayment {1}, but you output: {2}'
                            .format(attach[:-1], attach[-1], user_numbers)
                        )

            return CheckResult.correct()


    if __name__ == '__main__':
        LoanCalcTest('creditcalc.creditcalc').run_tests()
  learner_created: false
- name: creditcalc/utils.py
  visible: true
  text: |
    import math


    def nominal_interest_rate(interest_percent: float) -> float:
        return interest_percent / (100 * 12)


    def annuity_payment(principal: float, payments: float, n_interest_rate: float) -> float:
        i = n_interest_rate
        n = payments

        annuity = principal * (i * math.pow(1 + i, n)) / (math.pow(1 + i, n) - 1)
        return annuity
  learner_created: true
- name: creditcalc/calculate_periods.py
  visible: true
  text: |
    import math

    from utils import nominal_interest_rate


    def calculate_months(principal: float, payment: float, interest: float) -> int:
        interest_rate = nominal_interest_rate(interest)

        x = payment / (payment - interest_rate * principal)
        months = math.log(x, 1 + interest_rate)

        return math.ceil(months)


    def months_to_period(period_months: int) -> str:
        years = period_months // 12
        months = period_months % 12

        if years == 0:
            return '{months} {months_plural}'.format(
                months=months, months_plural='month' if months == 1 else 'months',
            )

        return '{years} {years_plural} and {months} {months_plural}'.format(
            years=years, years_plural='year' if years == 1 else 'years',
            months=months, months_plural='month' if months == 1 else 'months',
        )


    def run():
        print('Enter the loan principal:')
        principal = float(input().strip())

        print('Enter the monthly payment:')
        payment = float(input().strip())

        print('Enter the loan interest:')
        interest = float(input().strip())

        months = calculate_months(principal, payment, interest)

        print('It will take {period}'.format(period=months_to_period(months)))
  learner_created: true
- name: creditcalc/calculate_annuity.py
  visible: true
  text: |
    from math import ceil

    from utils import nominal_interest_rate, annuity_payment


    def calculate_annuity_payment(principal: float, periods: float, interest: float) -> float:
        interest_rate = nominal_interest_rate(interest)
        return annuity_payment(principal, periods, interest_rate)


    def run():
        print('Enter the loan principal:')
        principal = float(input().strip())

        print('Enter the number of periods:')
        periods = float(input().strip())

        print('Enter the loan interest:')
        interest = float(input().strip())

        payment = calculate_annuity_payment(principal, periods, interest)

        print('Your monthly payment = {}!'.format(ceil(payment)))
  learner_created: true
- name: creditcalc/calculate_principal.py
  visible: true
  text: |
    import math

    from utils import nominal_interest_rate


    def calculate_principal(payment: float, periods: float, interest: float) -> float:
        n = periods
        i = nominal_interest_rate(interest)

        principal = payment / ((i * math.pow(1 + i, n)) / (math.pow(1 + i, n) - 1))
        return principal


    def run():
        print('Enter the annuity payment:')
        payment = float(input().strip())

        print('Enter the number of periods:')
        periods = float(input().strip())

        print('Enter the loan interest:')
        interest = float(input().strip())

        principal = calculate_principal(payment, periods, interest)

        print('Your loan principal = {}!'.format(principal))
  learner_created: true
- name: creditcalc/calculate_diff.py
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/90/stages/503/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Mon, 04 Jan 2021 21:50:08 UTC
record: -1
